{"version":3,"sources":["api/api.ts","components/Navbar.tsx","hoc/withSuspense.tsx","components/ModalWindow.tsx","App.tsx","serviceWorker.ts","redux/redux-store.ts","index.tsx","redux/main-reducer.ts","components/Preloader.tsx","hoc/withSuspense.module.css","redux/chat-reducer.ts","assets/preloader.svg"],"names":["ResultStandartCodes","urlFirebase","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","coinsAPI","getCoins","then","res","data","chatAPI","getChatRoom","room","postChatRoom","person","post","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","titleNavbarUI","fontWeight","appBar","backgroundColor","orange","color","navLink","navbarButtons","Navbar","React","memo","classes","className","AppBar","position","Toolbar","Typography","variant","to","style","margin","Button","withSuspense","Component","props","classLoading","cn","s","selectedPage","pageNumber","PreloaderSuspense","Preloader","Suspense","fallback","mapDispatchToProps","setDataModalWindow","mainActions","ModalWindow","connect","state","isOpen","handleCloseCancel","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","onClick","TodosPage","lazy","AboutPage","TestBinance","Chat","SuspendedTodosPage","SuspendedAboutPage","SuspendedTestBinance","SuspendedChat","initializeApp","App","compose","initialized","mainApp","dataForModalWindow","catchAllUnhandleErrors","e","console","log","reason","message","useEffect","window","addEventListener","removeEventListener","Container","maxWidth","path","exact","render","Boolean","location","hostname","match","rootReducer","combineReducers","mainReducer","form","formReducer","chat","chatReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","initialState","messagesData","users","postMessages","followingInProgress","propsIsEditTodo","coins","action","type","body","payload","length","value","items","isInitialized","isFollowingInProgress","userId","filter","isEditTodo","addPostCreator","setUsers","sendMessage","toggleFollowingProgress","setPropsIsEditTodo","setCoins","initializeAppSuccess","requestCoins","dispatch","a","dataCoins","success","item","q","onload","setTimeout","src","preloader","alt","module","exports","firstName","lastName","colorIcon","autorizatedId","messagesInRoom","autorizatedPerson","isPersonFromLocalStrorage","isPersonExitChat","isLoadingChat","isAutorizatedPerson","Object","values","keys","every","color1","Math","floor","random","color2","color3","Date","now","chatActions","chatInitialedPerson","authorizationPersonSuccess","requestRoomSuccess","setDataExitChat","authorizationPerson","getState","personFromState","requestRoomIfPersonAutorizeted","response","status","Success","map","key","postMessageInRoom","options","month","day","hour","minute","hour12","date","toLocaleString","split","reverse","join","newPersonMessage","messageId"],"mappings":"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","file":"static/js/main.77d4a6d1.chunk.js","sourcesContent":["import { UserType, TodoType, MessageFullPersonType, CoinType } from './../types/types';\r\nimport axios from 'axios';\r\n// import openSocket from 'socket.io-client';\r\n\r\n\r\nconst urlFirebase = 'https://react-todolist-10bf5.firebaseio.com';\r\n\r\nlet instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': `c8ea854d-e495-4696-9913-9b1e4acda573`\r\n  }\r\n});\r\n\r\n\r\n\r\nexport enum ResultStandartCodes {\r\n  Success = 0 | 200,\r\n}\r\n\r\n\r\ntype UsersApiTypes = {\r\n  getUsers: {\r\n\t\titems: Array<UserType>\r\n\t\ttotalCount: number\r\n  }\r\n}\r\nexport const usersAPI = {\r\n  async getUsers (currentPage = 1, pageSize = 10) {\r\n    return instance.get<UsersApiTypes[\"getUsers\"]>(`users?page=${currentPage}&count=${pageSize}`)\r\n  }\r\n}\r\n\r\n\r\ntype coinsAPITypes = {\r\n  getCoins: {\r\n\t\tdata: Array<CoinType>\r\n\t\tsuccess: boolean\r\n  }\r\n}\r\nexport const coinsAPI = {\r\n  async getCoins () {\r\n    return axios.get<coinsAPITypes[\"getCoins\"]>(`https://www.binance.com/exchange-api/v1/public/asset-service/product/get-products`, {withCredentials: true}).then(res => res.data)\r\n  }\r\n}\r\n\r\n\r\ntype firebaseAPITypes = {\r\n  getNotes: Array<TodoType>\r\n  postNotes: {}\r\n}\r\nexport const firebaseAPI = {\r\n  async getNotes () {\r\n    return (\r\n      axios.get<firebaseAPITypes[\"getNotes\"]>(`${urlFirebase}/notes.json`)\r\n    )\r\n  },\r\n  async postNotes (notes: Array<TodoType>) {\r\n    return (\r\n      axios.put<firebaseAPITypes[\"postNotes\"]>(`${urlFirebase}/notes.json`, notes)\r\n    )\r\n  }\r\n}\r\n\r\n\r\ntype chatAPITypes = {\r\n  getChatRoom: {\r\n    [key: string]: MessageFullPersonType\r\n  }\r\n  postChatRoom: {}\r\n}\r\nexport const chatAPI = {\r\n  async getChatRoom (room: number) {\r\n    return (\r\n      axios.get<chatAPITypes[\"getChatRoom\"]>(`${urlFirebase}/chat/room${room}.json`, {headers: {\"Access-Control-Allow-Origin\": urlFirebase}})\r\n    )\r\n  },\r\n  async postChatRoom (person: MessageFullPersonType) {    \r\n    return (\r\n      axios.post<chatAPITypes[\"postChatRoom\"]>(`${urlFirebase}/chat/room${person.room}.json`, person, {headers: {\"Access-Control-Allow-Origin\": urlFirebase}})\r\n    )\r\n  }\r\n}\r\n\r\n\r\n// const socket = openSocket('http://localhost:8000');\r\n// export const subscribeToTimer = (cb: any) => {\r\n//   socket.on('timer', (timestamp: any) => cb(null, timestamp));\r\n//   socket.emit('subscribeToTimer', 1000);\r\n// }","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport {orange} from '@material-ui/core/colors';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  titleNavbarUI: {\r\n    fontWeight: 'normal',\r\n  },\r\n  appBar: {\r\n    backgroundColor: orange[700],\r\n    color: '#fff',\r\n  },\r\n  navLink: {\r\n    color: '#fff',\r\n  },\r\n  navbarButtons: {\r\n    '&:focus': {\r\n      backgroundColor: 'unset',\r\n    }\r\n  }\r\n}));\r\n\r\n\r\ntype PropsType = {}\r\n\r\nconst Navbar: React.FC<PropsType> = React.memo(() => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.appBar}>\r\n        <Toolbar className={'navbarBlock'}>\r\n          <Typography variant=\"h6\" className={`titleNavbarWrap ${classes.title}`}>\r\n            <NavLink className={`titleNavbar ${classes.navLink} ${classes.titleNavbarUI}`} to=\"/\">React + Typescript</NavLink>\r\n          </Typography>\r\n          <NavLink style={ {fontWeight: 'normal', margin: '0px 5px'} } className={classes.navLink} to=\"/chat\"><Button className={classes.navbarButtons} color=\"inherit\">Chat</Button></NavLink>\r\n          <NavLink style={ {fontWeight: 'normal', margin: '0px 5px'} } className={classes.navLink} to=\"/cryptoCurrencies\"><Button className={classes.navbarButtons} color=\"inherit\">Crypto currencies</Button></NavLink>\r\n          <NavLink style={ {fontWeight: 'normal', margin: '0px 5px'} } className={classes.navLink} to=\"/\"><Button className={classes.navbarButtons} color=\"inherit\">Todolist</Button></NavLink>\r\n          <NavLink style={ {fontWeight: 'normal', margin: '0px 5px'} } className={classes.navLink} to=\"/about\"><Button className={classes.navbarButtons} color=\"inherit\">Information</Button></NavLink>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n})\r\n\r\nexport default Navbar;\r\n\r\n\r\n","import React from 'react';\r\nimport s from './withSuspense.module.css';\r\nimport cn from \"classnames\";\r\nimport Preloader from '../components/Preloader';\r\n\r\n\r\nlet withSuspense = (Component: React.ComponentType): React.FC => (props) =>{\r\n  let classLoading = cn({[s.selectedPage]: (1+1) === (2+0)}, s.pageNumber);\r\n  let PreloaderSuspense = <div className={classLoading}><Preloader/></div>;\r\n\r\n  return (\r\n    <React.Suspense fallback={PreloaderSuspense}>\r\n      <Component {...props} />      \r\n    </React.Suspense>\r\n  )\r\n}\r\n\r\n\r\nexport default withSuspense;\r\n\r\n\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {mainActions} from '../redux/main-reducer';\r\nimport {connect} from 'react-redux';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\n\r\ntype MapStatePropsType = {}\r\ntype MapDispatchPropsType = {\r\n  setDataModalWindow: (isOpen: boolean, title?: string | null | undefined) => void\r\n}\r\ntype OwnPropsType = {\r\n  isOpen: boolean\r\n  title: string | null | undefined\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nconst ModalWindowContainer: React.FC<PropsType> = ({isOpen, title, setDataModalWindow}) => {\r\n  const handleCloseOk = () => {\r\n    setDataModalWindow(false, title)\r\n  };\r\n\r\n  const handleCloseCancel = () => {\r\n    setDataModalWindow(false, title);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={isOpen}\r\n        onClose={handleCloseCancel}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Attention!\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {title}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseOk} color=\"primary\">\r\n            OK\r\n          </Button>\r\n          <Button onClick={handleCloseCancel} color=\"primary\">\r\n            CANCEL\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {}\r\n}\r\nlet mapDispatchToProps: MapDispatchPropsType = {\r\n  setDataModalWindow: mainActions.setDataModalWindow\r\n}\r\n\r\n\r\nconst ModalWindow = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)(ModalWindowContainer)\r\n\r\nexport default ModalWindow;","import React, {useEffect} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport Navbar from './components/Navbar';\n// import TodosPage from './pages/TodosPage';\n// import AboutPage from './pages/AboutPage';\n// import TestPage from './pages/TestPage';\nimport withSuspense from './hoc/withSuspense';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {initializeApp} from './redux/main-reducer';\nimport Container from '@material-ui/core/Container';\nimport ModalWindow from './components/ModalWindow';\nimport Preloader from './components/Preloader';\nimport { AppStateType } from './redux/redux-store';\nimport { DataForModalWindowType } from './types/types';\n\n\nconst TodosPage = React.lazy(() => import('./pages/TodosPage'));\nconst AboutPage = React.lazy(() => import('./pages/AboutPage'));\nconst TestBinance = React.lazy(() => import('./components/TestBinance')); \nconst Chat = React.lazy(() => import('./components/Chat')); \n// const TestPage = React.lazy(() => import('./pages/TestPage')); \n\nconst SuspendedTodosPage = withSuspense(TodosPage)\nconst SuspendedAboutPage = withSuspense(AboutPage)\nconst SuspendedTestBinance = withSuspense(TestBinance)\nconst SuspendedChat = withSuspense(Chat)\n\n\ntype MapStatePropsType = {\n  initialized: boolean\n  dataForModalWindow: DataForModalWindowType\n}\ntype MapDispatchPropsType = {\n  initializeApp: () => void\n}\ntype OwnPropsType = {}\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\n\n\nconst AppContainer: React.FC<PropsType> = ({initializeApp, dataForModalWindow, initialized}) => {\n  let catchAllUnhandleErrors = (e: PromiseRejectionEvent) => {\n    console.log(\"Error! Reason: \" + e.reason.message);\n  }\n\n  useEffect(() => {\n    initializeApp()\n    window.addEventListener(\"unhandledrejection\", catchAllUnhandleErrors)\n    return () => window.removeEventListener(\"unhandledrejection\", catchAllUnhandleErrors)\n  }, [initializeApp])\n\n  if(!initialized) {\n    return (\n      <div className={\"appPreloaderBlock\"}>\n        <Preloader/>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <Container maxWidth=\"lg\">\n        <Switch>\n          <Route path=\"/\" exact render={() => <SuspendedTodosPage />}/>\n          <Route path=\"/about\" render={() => <SuspendedAboutPage />}/>\n          <Route path=\"/cryptoCurrencies\" render={() => <SuspendedTestBinance />}/>\n          <Route path=\"/chat\" render={() => <SuspendedChat />}/>\n          {/* <Route path=\"/test/:userId?\" render={withSuspense( () => <TestPage />)}/> */}\n        </Switch>\n        <ModalWindow {...dataForModalWindow} />\n      </Container>      \n    </div>  \n  );\n}\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    initialized: state.mainApp.initialized,\n    dataForModalWindow: state.mainApp.dataForModalWindow\n  }\n}\nlet mapDispatchToProps: MapDispatchPropsType = {\n  initializeApp\n}\n\n\nconst App = compose(\n  connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)\n)(AppContainer)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers,\r\n  applyMiddleware, compose} from 'redux';\r\nimport {mainReducer} from './main-reducer';\r\n//  import {firebaseReducer} from './firebase-reducer';\r\nimport {chatReducer} from './chat-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n  mainApp: mainReducer,\r\n  form: formReducer,\r\n  chat: chatReducer,\r\n//  firebase: firebaseReducer,\r\n});\r\n\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType> // специальная функция достает тип из ...\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U} ? U : never\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n// ts-ignore - игнорирует правила ts следующей строчки\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './redux/redux-store';\n\n\nReactDOM.render(\n  <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </HashRouter>      \n\n, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { ResultStandartCodes } from './../api/api';\r\nimport { ThunkType, UserType, CoinType, DataForModalWindowType } from './../types/types';\r\nimport { InferActionsTypes } from './redux-store';\r\nimport {usersAPI} from '../api/api';\r\nimport {coinsAPI} from '../api/api';\r\n\r\n\r\nlet initialState =  {\r\n\tmessagesData: [\r\n    {id: 1, message: 'Hi'},\r\n    {id: 2, message: 'How are you doing?'}, \r\n    {id: 3, message: 'GG'}, \r\n    {id: 4, message: 'GG'}, \r\n    {id: 5, message: 'GG'}, \r\n    {id: 6, message: 'GG'}\r\n   ] as Array<{id: number, message: string}>,\r\n   users: [] as Array<UserType>,\r\n   postMessages: [] as Array<{id: number, title: string}>,\r\n   initialized: false as boolean,\r\n   followingInProgress: [] as Array<number>,\r\n   propsIsEditTodo: true as boolean,\r\n   dataForModalWindow: {\r\n     isOpen: false,\r\n     title: 'Unknown error'\r\n   } as DataForModalWindowType,\r\n   coins: [] as Array<CoinType>,\r\n}\r\n\r\n\r\nexport const mainReducer = (state = initialState, action: MainActionsTypes): typeof initialState => {\r\n switch(action.type) {\r\n \tcase 'ADD_POST': {\r\n    const body = {...action.payload}\r\n\t  return {\r\n      ...state,\r\n      messagesData: [...state.messagesData, {id: state.messagesData.length + 1, message: body.value}]\r\n\t  };\r\n   }\r\n \tcase 'SET_USERS': {\r\n    const data = {...action.payload}\r\n\t  return {\r\n      ...state,\r\n      users: [...data.items]\r\n\t  };\r\n   }\r\n   case 'POST_MESSAGES': {\r\n    const data = {...action.payload}\r\n\t  return {\r\n      ...state,\r\n      postMessages: [...state.postMessages, {id: state.postMessages.length + 1, title: data.value}]\r\n\t  };\r\n   }\r\n   case 'INITIALIZED_SUCCESS': {\r\n    const value = {...action.payload}\r\n\t  return {\r\n      ...state,\r\n      initialized: value.isInitialized\r\n\t  };\r\n   }\r\n   case 'TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n\t  return {\r\n\t  \t...state,\r\n\t\t\tfollowingInProgress: action.isFollowingInProgress \r\n\t\t\t? [...state.followingInProgress, action.userId] \r\n\t\t\t: [...state.followingInProgress.filter(id => id !== action.userId)]\r\n\t  };\r\n   }\r\n   case 'SET_PROPS_IS_EDIT_TODO': {\r\n    const value = {...action.payload}\r\n\t  return {\r\n      ...state,\r\n      propsIsEditTodo: value.isEditTodo\r\n\t  };\r\n   }\r\n   case 'SET_DATA_MODAL_WINDOW': {\r\n    const value = {...action.payload}\r\n\t  return {\r\n      ...state,\r\n      dataForModalWindow: {\r\n        isOpen: value.isOpen,\r\n        title: value.title\r\n      }\r\n\t  };\r\n   }\r\n   case 'SET_COINS': {\r\n    const value = {...action.payload}\r\n\t  return {\r\n      ...state,\r\n      coins: [...value.data]\r\n\t  };\r\n   }\r\n\t default: \r\n\t  return state;\r\n }\r\n}\r\n\r\n\r\n\r\nexport type MainActionsTypes = InferActionsTypes<typeof mainActions>\r\n\r\nexport const mainActions = {\r\n  addPostCreator: (value: string) => ({\r\n    type: 'ADD_POST', payload: {value}\r\n  } as const),\r\n  setUsers: (items: Array<UserType>) => ({\r\n    type: 'SET_USERS', payload: {items}\r\n  } as const),\r\n  sendMessage: (value: string) => ({\r\n    type: 'POST_MESSAGES', payload: {value}\r\n  } as const),\r\n  toggleFollowingProgress: (isFollowingInProgress: boolean, userId: number) => ({ \r\n    type: 'TOGGLE_IS_FOLLOWING_PROGRESS', isFollowingInProgress, userId\r\n  } as const),\r\n  setPropsIsEditTodo: (isEditTodo: boolean) => ({\r\n    type: 'SET_PROPS_IS_EDIT_TODO', payload: {isEditTodo}\r\n  } as const),\r\n  setDataModalWindow: (isOpen: boolean, title?: string | null | undefined) => ({\r\n    type: 'SET_DATA_MODAL_WINDOW', payload: {isOpen, title}\r\n  } as const),\r\n  setCoins: (data: Array<CoinType>) => ({\r\n    type: 'SET_COINS', payload: {data}\r\n  } as const),\r\n  initializeAppSuccess: () => ({\r\n    type: 'INITIALIZED_SUCCESS', payload: {isInitialized: true}\r\n  } as const),\r\n}\r\n\r\n\r\n\r\nexport const requestUsers = (): ThunkType => async (dispatch) => {  \r\n  try {\r\n    let response = await usersAPI.getUsers();\r\n    if (response.status === ResultStandartCodes.Success) {\r\n      dispatch(mainActions.setUsers(response.data.items));\r\n      throw new Error(\"Проверка!!!\");\r\n    }\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n}\r\n\r\n\r\nexport const requestCoins = (): ThunkType => async (dispatch) => {\r\n  let dataCoins = await coinsAPI.getCoins();\r\n  if (dataCoins.success) {\r\n    let coins = dataCoins.data.filter(item => item.q === 'RUB')\r\n    dispatch(mainActions.setCoins(coins));\r\n  }\r\n}\r\n\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch) => {\r\n  // делаем инициализцию приложения, для того, чтобы \r\n  // получить стартовые данные для конкретного пользователя, \r\n  // ну и вовсе определить, а есть ли конкретный пользователь, или он аноним.\r\n  window.onload = () => {\r\n    let SetPreloader = () => {\r\n      setTimeout(()=>{\r\n        dispatch(mainActions.initializeAppSuccess());\r\n      }, 1000);\r\n    }\r\n    SetPreloader();\r\n  }\r\n  // Promise.reject('to stop server requests: cancel the getCoins() request in coinsAPI') // просто тестирую на ошибку\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport preloader from '../assets/preloader.svg';\r\n\r\n\r\ntype PropsType = {}\r\n\r\nconst Preloader: React.FC<PropsType> = (props) => {\r\n\treturn (\r\n    <div className={\"appPreloaderBlockSvg\"}>\r\n      <img src={preloader} alt=\"preloader\"/>\r\n    </div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"withSuspense_selectedPage__24RfB\"};","import { ResultStandartCodes } from './../api/api';\r\nimport { ThunkType, PersonType, MessageFullPersonType } from './../types/types';\r\nimport { InferActionsTypes } from './redux-store';\r\nimport {chatAPI} from '../api/api';\r\n\r\n\r\nlet initialState = {\r\n  person: {\r\n    id: null,\r\n    firstName: '',\r\n    lastName: '',\r\n    colorIcon: [],\r\n    room: null,\r\n    autorizatedId: null,\r\n  } as PersonType,\r\n  messagesInRoom: [] as Array<MessageFullPersonType>,\r\n  autorizatedPerson: false as boolean,\r\n  isPersonFromLocalStrorage: false as boolean,\r\n  isPersonExitChat: false as boolean,\r\n  isLoadingChat: false as boolean\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action: ChatActionsTypes): typeof initialState => {\r\n switch(action.type) {\r\n \tcase 'CHAT_INITIALIZED_PERSON': {\r\n    const person = {...action.payload.person}\r\n    let isAutorizatedPerson = (Object.values(person).length === Object.keys(person).length) && (Object.values(person).every(item => item))\r\n\t  return {\r\n      ...state,\r\n      person: {\r\n        ...person\r\n      },\r\n      isPersonFromLocalStrorage: true,\r\n      autorizatedPerson: isAutorizatedPerson\r\n\t  };\r\n   }\r\n   case 'AUTHORIZATION_PERSON': {\r\n    const payload = {...action.payload.person}\r\n    let color1 = Math.floor(Math.random() * 200 + 1) // не 255, чтобы не было белого цвета\r\n    let color2 = Math.floor(Math.random() * 200 + 1)\r\n    let color3 = Math.floor(Math.random() * 200 + 1) \r\n\t  return {\r\n      ...state,\r\n      person: {\r\n        ...state.person,\r\n        firstName: payload.firstName,\r\n        lastName: payload.lastName,\r\n        colorIcon: [color1, color2, color3],\r\n        room: payload.room,\r\n        autorizatedId: Date.now()\r\n      },\r\n      autorizatedPerson: true\r\n\t  };\r\n   }\r\n   case 'REQUEST_ROOM_SUCCESS': {\r\n\t  return {\r\n      ...state,\r\n      messagesInRoom: [...action.payload.messagesInRoom],\r\n      isLoadingChat: true\r\n\t  };\r\n   }\r\n   case 'SET_DATA_EXIT_CHAT': {\r\n\t  return {\r\n      ...state,\r\n      person: {\r\n        ...state.person,\r\n        firstName: '',\r\n        lastName: '',\r\n        colorIcon: [],\r\n        room: null,\r\n        autorizatedId: null\r\n      },\r\n      messagesInRoom: [],\r\n      autorizatedPerson: false,\r\n      isPersonFromLocalStrorage: false,\r\n      isPersonExitChat: true\r\n\t  };\r\n   }\r\n\t default: \r\n\t  return state;\r\n }\r\n}\r\n\r\n\r\n\r\nexport type ChatActionsTypes = InferActionsTypes<typeof chatActions>\r\n\r\nexport const chatActions = {\r\n  chatInitialedPerson: (person: PersonType) => ({\r\n    type: 'CHAT_INITIALIZED_PERSON', payload: {person}\r\n  } as const),\r\n  authorizationPersonSuccess: (person: PersonType) => ({\r\n    type: 'AUTHORIZATION_PERSON', payload: {person}\r\n  } as const),\r\n  requestRoomSuccess: (messagesInRoom: Array<MessageFullPersonType>) => ({\r\n    type: 'REQUEST_ROOM_SUCCESS', payload: {messagesInRoom}\r\n  } as const),\r\n  setDataExitChat: () => ({\r\n    type: 'SET_DATA_EXIT_CHAT', payload: {}\r\n  } as const),\r\n}\r\n\r\n\r\n\r\nexport const authorizationPerson = (room: number, firstName: string, lastName: string): ThunkType => async (dispatch, getState) => {\r\n  let personFromState = {...getState().chat.person, ...{room, firstName, lastName}}\r\n  dispatch(chatActions.authorizationPersonSuccess(personFromState));\r\n};\r\n\r\n\r\nexport const requestRoomIfPersonAutorizeted = (room: number): ThunkType => async (dispatch) => {\r\n  const response = await chatAPI.getChatRoom(room)\r\n  if (response.status === ResultStandartCodes.Success) {\r\n    const messagesInRoom = response.data ? [...Object.keys(response.data).map(key => response.data[key])] : []\r\n    dispatch(chatActions.requestRoomSuccess(messagesInRoom));\r\n  }\r\n};\r\n\r\n\r\nexport const postMessageInRoom = (person: PersonType, title: string): ThunkType => async (dispatch) => {\r\n  let options = { month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: false }\r\n  let date = new Date().toLocaleString('en-US', options).split(', ').reverse().join(', ')\r\n  let newPersonMessage = {...person, message: title, date: date, messageId: Date.now()}\r\n  await chatAPI.postChatRoom(newPersonMessage)\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/preloader.94251f4a.svg\";"],"sourceRoot":""}