{"version":3,"sources":["validators/validators.ts","../node_modules/@material-ui/icons/Send.js","../node_modules/@material-ui/core/esm/styles/createStyles.js","../node_modules/@material-ui/core/esm/ListItem/ListItem.js","../node_modules/@material-ui/core/esm/MenuItem/MenuItem.js","components/Chat.tsx"],"names":["validateString","title","limit","checkArray","split","isTheWordLonger","i","length","replace","trim","chatValidatorForm","room","firstName","lastName","firstSpace","includes","lastSpace","_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","createStyles","styles","useEnhancedEffect","window","React","ListItem","props","ref","_props$alignItems","alignItems","_props$autoFocus","autoFocus","_props$button","button","childrenProp","children","classes","className","componentProp","component","_props$ContainerCompo","ContainerComponent","_props$ContainerProps","ContainerProps","ContainerClassName","_objectWithoutProperties","_props$dense","dense","_props$disabled","disabled","_props$disableGutters","disableGutters","_props$divider","divider","focusVisibleClassName","_props$selected","selected","other","context","ListContext","childContext","listItemRef","current","focus","toArray","hasSecondaryAction","isMuiElement","handleOwnRef","instance","ReactDOM","handleRef","useForkRef","componentProps","_extends","clsx","root","gutters","alignItemsFlexStart","secondaryAction","Component","focusVisible","ButtonBase","Provider","container","pop","withStyles","theme","display","justifyContent","position","textDecoration","width","boxSizing","textAlign","paddingTop","paddingBottom","backgroundColor","palette","action","opacity","borderBottom","concat","backgroundClip","paddingLeft","paddingRight","transition","transitions","create","duration","shortest","hover","name","MenuItem","tabIndex","_props$component","ListItemClasses","_props$role","role","tabIndexProp","undefined","typography","body1","_defineProperty","minHeight","overflow","whiteSpace","breakpoints","up","body2","CssTextField","color","teal","height","borderBottomColor","borderColor","TextField","useStyles","makeStyles","margin","spacing","orange","loginButton","marginTop","loginInput","loginSelect","loguotButton","fontSize","padding","right","mapDispatchToProps","setDataModalWindow","mainActions","chatInitialedPerson","chatActions","setDataExitChat","authorizationPerson","postMessageInRoom","requestRoomIfPersonAutorizeted","TestBinance","connect","state","person","chat","messagesInRoom","autorizatedPerson","isPersonFromLocalStrorage","isPersonExitChat","isLoadingChat","useState","setTitle","ScrollChatBlock","createRef","countScrollChatBar","setcountScrollChatBar","redraw","setRedraw","useEffect","savedPerson","JSON","parse","localStorage","getItem","id","Date","now","setItem","stringify","console","log","setTimeout","scrollTop","scrollHeight","prev","clientHeight","onSubmit","e","preventDefault","currentTarget","numberRoom","sendPerson","noValidate","autoComplete","InputLabel","Select","labelId","defaultValue","label","Button","type","variant","onClick","map","item","key","messageId","autorizatedId","style","colorIcon","slice","toUpperCase","date","message","onChange","target","rowsMax","multiline","endIcon","Preloader"],"mappings":"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","file":"static/js/4.39d2e767.chunk.js","sourcesContent":["export type FieldValidatorType = (...args: any[]) => string | boolean | undefined\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value: string) => {\r\n  if (value && value.length > maxLength) {\r\n    return `Max length is ${maxLength} symbols`;\r\n  } else {\r\n    return undefined;    \r\n  }\r\n}\r\n\r\n\r\nexport const validateString: FieldValidatorType = (title: string, limit: number) => {\r\n  let checkArray: string[] = title.split(' ')\r\n  let isTheWordLonger: boolean = false\r\n\r\n  for(let i: number = 0; i < checkArray.length; i++) {  \r\n    if (checkArray[i].length < 18) {\r\n      isTheWordLonger = true\r\n    }\r\n  }\r\n  if ((isTheWordLonger) && (title.replace(/\\s+/g, ' ').trim() !== '') && (title.length < limit)) {\r\n    return title.replace(/\\s+/g, ' ').trim()\r\n  } else {\r\n    return undefined\r\n  }  \r\n}\r\n\r\n\r\nexport const chatValidatorForm: FieldValidatorType = (room: string, firstName: string, lastName: string) => {\r\n  let firstSpace = firstName.split('').includes(' ')\r\n  let lastSpace = lastName.split('').includes(' ')\r\n  if (firstSpace || lastSpace || !room || !firstName || !lastName || (firstName.length > 15) || (lastName.length > 15)) {\r\n    return false\r\n  } else {\r\n    return true;    \r\n  }\r\n}\r\n\r\n\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\n\nexports.default = _default;","import { createStyles as createStylesOriginal } from '@material-ui/styles'; // let warnOnce = false;\n// To remove in v5\n\nexport default function createStyles(styles) {\n  // warning(\n  //   warnOnce,\n  //   [\n  //     'Material-UI: createStyles from @material-ui/core/styles is deprecated.',\n  //     'Please use @material-ui/styles/createStyles',\n  //   ].join('\\n'),\n  // );\n  // warnOnce = true;\n  return createStylesOriginal(styles);\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport isMuiElement from '../utils/isMuiElement';\nimport useForkRef from '../utils/useForkRef';\nimport ListContext from '../List/ListContext';\nimport * as ReactDOM from 'react-dom';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */\n    root: {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      position: 'relative',\n      textDecoration: 'none',\n      width: '100%',\n      boxSizing: 'border-box',\n      textAlign: 'left',\n      paddingTop: 8,\n      paddingBottom: 8,\n      '&$focusVisible': {\n        backgroundColor: theme.palette.action.selected\n      },\n      '&$selected, &$selected:hover': {\n        backgroundColor: theme.palette.action.selected\n      },\n      '&$disabled': {\n        opacity: 0.5\n      }\n    },\n\n    /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */\n    container: {\n      position: 'relative'\n    },\n\n    /* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */\n    focusVisible: {},\n\n    /* Styles applied to the `component` element if dense. */\n    dense: {\n      paddingTop: 4,\n      paddingBottom: 4\n    },\n\n    /* Styles applied to the `component` element if `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      alignItems: 'flex-start'\n    },\n\n    /* Pseudo-class applied to the inner `component` element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the inner `component` element if `divider={true}`. */\n    divider: {\n      borderBottom: \"1px solid \".concat(theme.palette.divider),\n      backgroundClip: 'padding-box'\n    },\n\n    /* Styles applied to the inner `component` element if `disableGutters={false}`. */\n    gutters: {\n      paddingLeft: 16,\n      paddingRight: 16\n    },\n\n    /* Styles applied to the inner `component` element if `button={true}`. */\n    button: {\n      transition: theme.transitions.create('background-color', {\n        duration: theme.transitions.duration.shortest\n      }),\n      '&:hover': {\n        textDecoration: 'none',\n        backgroundColor: theme.palette.action.hover,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */\n    secondaryAction: {\n      // Add some space to avoid collision as `ListItemSecondaryAction`\n      // is absolutely positioned.\n      paddingRight: 48\n    },\n\n    /* Pseudo-class applied to the root element if `selected={true}`. */\n    selected: {}\n  };\n};\nvar useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\n * Uses an additional container component if `ListItemSecondaryAction` is the last child.\n */\n\nvar ListItem = React.forwardRef(function ListItem(props, ref) {\n  var _props$alignItems = props.alignItems,\n      alignItems = _props$alignItems === void 0 ? 'center' : _props$alignItems,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      _props$button = props.button,\n      button = _props$button === void 0 ? false : _props$button,\n      childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      componentProp = props.component,\n      _props$ContainerCompo = props.ContainerComponent,\n      ContainerComponent = _props$ContainerCompo === void 0 ? 'li' : _props$ContainerCompo,\n      _props$ContainerProps = props.ContainerProps;\n  _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;\n\n  var ContainerClassName = _props$ContainerProps.className,\n      ContainerProps = _objectWithoutProperties(_props$ContainerProps, [\"className\"]),\n      _props$dense = props.dense,\n      dense = _props$dense === void 0 ? false : _props$dense,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$divider = props.divider,\n      divider = _props$divider === void 0 ? false : _props$divider,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$selected = props.selected,\n      selected = _props$selected === void 0 ? false : _props$selected,\n      other = _objectWithoutProperties(props, [\"alignItems\", \"autoFocus\", \"button\", \"children\", \"classes\", \"className\", \"component\", \"ContainerComponent\", \"ContainerProps\", \"dense\", \"disabled\", \"disableGutters\", \"divider\", \"focusVisibleClassName\", \"selected\"]);\n\n  var context = React.useContext(ListContext);\n  var childContext = {\n    dense: dense || context.dense || false,\n    alignItems: alignItems\n  };\n  var listItemRef = React.useRef(null);\n  useEnhancedEffect(function () {\n    if (autoFocus) {\n      if (listItemRef.current) {\n        listItemRef.current.focus();\n      } else if (process.env.NODE_ENV !== 'production') {\n        console.error('Material-UI: unable to set focus to a ListItem whose component has not been rendered.');\n      }\n    }\n  }, [autoFocus]);\n  var children = React.Children.toArray(childrenProp);\n  var hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    listItemRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(handleOwnRef, ref);\n\n  var componentProps = _extends({\n    className: clsx(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== \"center\" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),\n    disabled: disabled\n  }, other);\n\n  var Component = componentProp || 'li';\n\n  if (button) {\n    componentProps.component = componentProp || 'div';\n    componentProps.focusVisibleClassName = clsx(classes.focusVisible, focusVisibleClassName);\n    Component = ButtonBase;\n  }\n\n  if (hasSecondaryAction) {\n    // Use div by default.\n    Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.\n\n    if (ContainerComponent === 'li') {\n      if (Component === 'li') {\n        Component = 'div';\n      } else if (componentProps.component === 'li') {\n        componentProps.component = 'div';\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(ListContext.Provider, {\n      value: childContext\n    }, /*#__PURE__*/React.createElement(ContainerComponent, _extends({\n      className: clsx(classes.container, ContainerClassName),\n      ref: handleRef\n    }, ContainerProps), /*#__PURE__*/React.createElement(Component, componentProps, children), children.pop()));\n  }\n\n  return /*#__PURE__*/React.createElement(ListContext.Provider, {\n    value: childContext\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    ref: handleRef\n  }, componentProps), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItem.propTypes = {\n  /**\n   * Defines the `align-items` style property.\n   */\n  alignItems: PropTypes.oneOf(['flex-start', 'center']),\n\n  /**\n   * If `true`, the list item will be focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the list item will be a button (using `ButtonBase`). Props intended\n   * for `ButtonBase` can then be applied to `ListItem`.\n   */\n  button: PropTypes.bool,\n\n  /**\n   * The content of the component. If a `ListItemSecondaryAction` is used it must\n   * be the last child.\n   */\n  children: chainPropTypes(PropTypes.node, function (props) {\n    var children = React.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)\n\n    var secondaryActionIndex = -1;\n\n    for (var i = children.length - 1; i >= 0; i -= 1) {\n      var child = children[i];\n\n      if (isMuiElement(child, ['ListItemSecondaryAction'])) {\n        secondaryActionIndex = i;\n        break;\n      }\n    } //  is ListItemSecondaryAction the last child of ListItem\n\n\n    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {\n      return new Error('Material-UI: you used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The container component used when a `ListItemSecondaryAction` is the last child.\n   */\n  ContainerComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the container component if used.\n   */\n  ContainerProps: PropTypes.object,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used.\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * If `true`, the list item will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * If `true`, a 1px light border is added to the bottom of the list item.\n   */\n  divider: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * Use to apply selected styling.\n   */\n  selected: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItem'\n})(ListItem);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListItem from '../ListItem';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body1, _defineProperty({\n      minHeight: 48,\n      paddingTop: 6,\n      paddingBottom: 6,\n      boxSizing: 'border-box',\n      width: 'auto',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap'\n    }, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    })),\n    // TODO v5: remove\n\n    /* Styles applied to the root element if `disableGutters={false}`. */\n    gutters: {},\n\n    /* Styles applied to the root element if `selected={true}`. */\n    selected: {},\n\n    /* Styles applied to the root element if dense. */\n    dense: _extends({}, theme.typography.body2, {\n      minHeight: 'auto'\n    })\n  };\n};\nvar MenuItem = React.forwardRef(function MenuItem(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'li' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      ListItemClasses = props.ListItemClasses,\n      _props$role = props.role,\n      role = _props$role === void 0 ? 'menuitem' : _props$role,\n      selected = props.selected,\n      tabIndexProp = props.tabIndex,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disableGutters\", \"ListItemClasses\", \"role\", \"selected\", \"tabIndex\"]);\n\n  var tabIndex;\n\n  if (!props.disabled) {\n    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;\n  }\n\n  return /*#__PURE__*/React.createElement(ListItem, _extends({\n    button: true,\n    role: role,\n    tabIndex: tabIndex,\n    component: component,\n    selected: selected,\n    disableGutters: disableGutters,\n    classes: _extends({\n      dense: classes.dense\n    }, ListItemClasses),\n    className: clsx(classes.root, className, selected && classes.selected, !disableGutters && classes.gutters),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes = {\n  /**\n   * Menu item contents.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used.\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * `classes` prop applied to the [`ListItem`](/api/list-item/) element.\n   */\n  ListItemClasses: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  role: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.number\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiMenuItem'\n})(MenuItem);","import React, {useState, useEffect, ChangeEvent} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Button from '@material-ui/core/Button'\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { createStyles, makeStyles, Theme, withStyles } from '@material-ui/core/styles';\r\nimport {teal, orange} from '@material-ui/core/colors';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n// import socket from '../socket/socket';\r\nimport {authorizationPerson, postMessageInRoom, requestRoomIfPersonAutorizeted,\r\n chatActions} from '../redux/chat-reducer';\r\nimport {chatValidatorForm, validateString} from '../validators/validators';\r\nimport {mainActions} from '../redux/main-reducer';\r\nimport { AppStateType } from '../redux/redux-store';\r\nimport { PersonType, MessageFullPersonType } from '../types/types';\r\nimport Preloader from './Preloader';\r\n\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: teal[400],\r\n    },\r\n    '& textarea': {\r\n      height: 'auto',\r\n    },\r\n    '& input': {\r\n      height: 'auto',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: teal[400],\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        transition: 'all 0.3s',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: 'black',\r\n        transition: 'all 0.3s',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: teal[400],\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    button: {\r\n      margin: `0px 0px 0px ${theme.spacing(1)}px`,\r\n      height: '100%',\r\n      backgroundColor: orange[700],\r\n      color: '#fff', \r\n      '&:hover': {\r\n        backgroundColor: orange[500],\r\n      },\r\n    },   \r\n    loginButton: {\r\n      height: '50px',\r\n      backgroundColor: orange[700],\r\n      color: '#fff', \r\n      marginTop: '10px',\r\n      '&:hover': {\r\n        backgroundColor: orange[500],\r\n      },\r\n    },  \r\n    loginInput: {\r\n      margin: '10px 0px'\r\n    },\r\n    loginSelect: {\r\n      \"& .MuiSelect-select:focus\": {\r\n        backgroundColor: 'transparent',\r\n      },\r\n      \"&::after\": {\r\n        borderBottom: `2px solid ${teal[400]}`,\r\n      },\r\n    },\r\n    loguotButton: {\r\n      height: '30px',\r\n      margin: '0px',\r\n      fontSize: '12px',\r\n      position: 'absolute',\r\n      padding: '5px 10px',\r\n      right: '10px',\r\n    }\r\n  }),\r\n);\r\n\r\n\r\ntype MapStatePropsType = {\r\n  person: PersonType\r\n  messagesInRoom: Array<MessageFullPersonType>\r\n  autorizatedPerson: boolean\r\n  isPersonFromLocalStrorage: boolean\r\n  isPersonExitChat: boolean\r\n  isLoadingChat: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n  setDataModalWindow: (isOpen: boolean, title?: string | null | undefined) => void\r\n  chatInitialedPerson: (person: PersonType) => void\r\n  setDataExitChat: () => void\r\n  authorizationPerson: (room: number, firstName: string, lastName: string) => void\r\n  postMessageInRoom: (person: PersonType, title: string) => void\r\n  requestRoomIfPersonAutorizeted: (room: number) => void\r\n}\r\ntype OwnPropsType = {}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nconst TestBinanceContainer: React.FC<PropsType> = ({person, chatInitialedPerson, authorizationPerson, messagesInRoom, requestRoomIfPersonAutorizeted,\r\n  postMessageInRoom, autorizatedPerson, setDataModalWindow, isPersonFromLocalStrorage, setDataExitChat, isPersonExitChat, isLoadingChat}) => {\r\n    \r\n  const classes = useStyles();\r\n  const [title, setTitle] = useState<string>('')\r\n  const ScrollChatBlock = React.createRef<HTMLDivElement>()\r\n  const [countScrollChatBar, setcountScrollChatBar] = useState<number>(0)\r\n  const [redraw, setRedraw] = useState<boolean>(false)\r\n\r\n\r\n  useEffect(() => {\r\n    let savedPerson = JSON.parse(localStorage.getItem('person') || '{}')\r\n    if (!savedPerson.id) {\r\n      const id = Date.now();\r\n      chatInitialedPerson({...savedPerson, id: id})\r\n    } else {\r\n      chatInitialedPerson({...savedPerson})\r\n    }\r\n  }, [chatInitialedPerson])\r\n\r\n  useEffect(() => {\r\n    if (isPersonFromLocalStrorage || isPersonExitChat) {\r\n      localStorage.setItem('person', JSON.stringify(person))\r\n    }\r\n  }, [person, isPersonFromLocalStrorage, isPersonExitChat])\r\n\r\n  useEffect(() => {\r\n    if (autorizatedPerson && person.room && !redraw) { // делаем постоянную перерисовку (каждую 1 секунду, см. ниже setTimeout)\r\n      requestRoomIfPersonAutorizeted(person.room)\r\n      console.log('Redraw chat')\r\n      setRedraw(true)\r\n      setTimeout(() => {\r\n        setRedraw(false)\r\n      }, 1000)\r\n    }\r\n  }, [autorizatedPerson, redraw, person.room, requestRoomIfPersonAutorizeted])\r\n\r\n  useEffect(() => {\r\n    if (ScrollChatBlock.current && (countScrollChatBar === 0)) {\r\n      ScrollChatBlock.current.scrollTop = ScrollChatBlock.current.scrollHeight\r\n      setcountScrollChatBar(prev => prev + 1)\r\n    }\r\n    if (ScrollChatBlock.current) {\r\n      if (ScrollChatBlock.current.scrollTop + ScrollChatBlock.current.clientHeight + 90 > ScrollChatBlock.current.scrollHeight) { // если больше 90 прокрученно вверх, то отматывать в конец не будет\r\n        ScrollChatBlock.current.scrollTop = ScrollChatBlock.current.scrollHeight\r\n      }\r\n    }\r\n  }, [ScrollChatBlock, countScrollChatBar])\r\n  \r\n\r\n  const changeMessage = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.target.value)\r\n  }\r\n\r\n  const sendMessage = () => {\r\n    let isValidate = validateString(title, 1000)\r\n    if (isValidate) {\r\n      postMessageInRoom(person, title)\r\n      // socket.emit('sendMessage', {...person, title}) // работаем с сокетами\r\n    } else {\r\n      setDataModalWindow(true, \"Enter your message correctly: use not only spaces, a limit of 1000 characters, and any word should not exceed 30 characters.\");\r\n    }\r\n    setTitle('')\r\n  }\r\n\r\n  const sendPerson = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    let room = e.currentTarget.numberRoom.value\r\n    let firstName = e.currentTarget.firstName.value\r\n    let lastName = e.currentTarget.lastName.value\r\n    let isValidate = chatValidatorForm(room, firstName, lastName)\r\n    if (isValidate) {\r\n      authorizationPerson(room, firstName, lastName)\r\n    } else {\r\n      setDataModalWindow(true, \"Please fill out the form correctly! Fields without spaces and a maximum of 15 characters each and select the room you need.\");\r\n    }\r\n  }\r\n\r\n  const exitChat = () => {\r\n    setDataExitChat();\r\n    setTitle('')\r\n    if (countScrollChatBar !== 0) setcountScrollChatBar(0)\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className=\"chatContainer\">\r\n      <h1 className=\"chatH1\">Chat</h1>\r\n      <div className={'chatWrap'}>\r\n\r\n      {!autorizatedPerson \r\n        ? <div className={\"loginWrap\"}>\r\n            <div className={\"loginTitle\"}>Login</div>\r\n            <form onSubmit={(e) => sendPerson(e)} className={\"loginForm\"} noValidate autoComplete=\"off\">\r\n              <InputLabel id=\"demo-simple-select-label\">Choose a room</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                className={classes.loginSelect}\r\n                name={'numberRoom'}\r\n                defaultValue={1}\r\n              >\r\n                <MenuItem value={1}>Room 1</MenuItem>\r\n                <MenuItem value={2}>Room 2</MenuItem>\r\n                <MenuItem value={3}>Room 3</MenuItem>\r\n                <MenuItem value={4}>Room 4</MenuItem>\r\n                <MenuItem value={5}>Room 5</MenuItem>\r\n              </Select>\r\n              <CssTextField name={'firstName'} className={classes.loginInput} label=\"Enter your name\" />\r\n              <CssTextField name={'lastName'} className={classes.loginInput} label=\"Enter last name\" /> \r\n              <Button type={\"submit\"} variant=\"contained\" color=\"primary\" className={classes.loginButton}>Submit</Button>        \r\n            </form>\r\n          </div>\r\n        : null}\r\n\r\n\r\n        {autorizatedPerson \r\n        ? isLoadingChat\r\n          ? <div className={'chatBlock'}>\r\n              <div className=\"chatTitle\">\r\n                <span>Room {person.room}</span>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={`${classes.loguotButton} ${classes.button}`}\r\n                  onClick={() => exitChat()}\r\n                >\r\n                  Exit chat\r\n                </Button></div> \r\n\r\n              <div ref={ScrollChatBlock} className=\"chatText\">\r\n                {messagesInRoom.length\r\n                  ? messagesInRoom.map(item => (\r\n                    <div key={item.messageId} className=\"chatPerson\">\r\n                      <div className={`chatPersonImg ${person.autorizatedId === item.autorizatedId ? 'chatPersonImgMe' : ''}`} style={{backgroundColor: person.autorizatedId === item.autorizatedId \r\n                                                                                                                                                          ? '#00c853' \r\n                                                                                                                                                          : `rgb(${item.colorIcon[0]},\r\n                                                                                                                                                            ${item.colorIcon[1]},\r\n                                                                                                                                                            ${item.colorIcon[2]})`}}>\r\n                        {person.id === item.id \r\n                          ? person.autorizatedId === item.autorizatedId\r\n                              ? <span>You <br/> (now)</span>\r\n                              : <span>You <br/> (before)</span>\r\n                          : <span style={{fontSize: '20px'}}>\r\n                              {item ? (\r\n                                item.firstName ? item.firstName.slice(0, 1).toUpperCase() : ''\r\n                              ) : ''}\r\n                              {item ?\r\n                                item.lastName ? item.lastName.slice(0, 1).toUpperCase() : ''\r\n                              : ''}\r\n                            </span>\r\n                        }\r\n                      </div>\r\n                      <div className=\"chatPersonBlock\">\r\n                        <div className=\"chatPersonName\">\r\n                          <span>{`${item.firstName} ${item.lastName}`}</span>\r\n                          <span className=\"chatPersonNameData\">{`${item.date}`}</span>\r\n                        </div>\r\n                        <div className={`chatPersonMessage ${person.autorizatedId === item.autorizatedId ? 'chatPersonMessageMe' : ''}`}><span>{`${item.message}`}</span></div>\r\n                      </div>              \r\n                    </div>              \r\n                  ))\r\n                  : <div className=\"chatPerson\">\r\n                      <div className=\"chatPersonImg\"></div>\r\n                      <div className=\"chatPersonBlock\">\r\n                        <div className=\"chatPersonName\">\r\n                          <span>Bot</span>\r\n                          <span className=\"chatPersonNameData\"></span>\r\n                        </div>\r\n                        <div className=\"chatPersonMessage\">Hello! There are no messages in this chat yet</div>\r\n                      </div>              \r\n                    </div> \r\n                }   \r\n              </div>       \r\n\r\n              <div className=\"chatSend\">\r\n                <CssTextField\r\n                  onChange={changeMessage} \r\n                  rowsMax={5}\r\n                  multiline\r\n                  value={title}\r\n                  label=\"Enter case name\"\r\n                  id=\"outlined-basic\" variant=\"outlined\"\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  endIcon={<SendIcon></SendIcon>}\r\n                  onClick={() => sendMessage()}\r\n                >\r\n                  Send\r\n                </Button>\r\n              </div> \r\n            </div>\r\n          : <div className={'secondPreloader'}><Preloader /></div>\r\n        : null}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    person: state.chat.person,\r\n    messagesInRoom: state.chat.messagesInRoom,\r\n    autorizatedPerson: state.chat.autorizatedPerson,\r\n    isPersonFromLocalStrorage: state.chat.isPersonFromLocalStrorage,\r\n    isPersonExitChat: state.chat.isPersonExitChat,\r\n    isLoadingChat: state.chat.isLoadingChat\r\n  }\r\n}\r\nlet mapDispatchToProps: MapDispatchPropsType = {\r\n  setDataModalWindow: mainActions.setDataModalWindow,\r\n  chatInitialedPerson: chatActions.chatInitialedPerson,\r\n  setDataExitChat: chatActions.setDataExitChat,\r\n  authorizationPerson,\r\n  postMessageInRoom,\r\n  requestRoomIfPersonAutorizeted,\r\n}\r\n\r\n\r\nconst TestBinance = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)(TestBinanceContainer)\r\n\r\nexport default TestBinance;"],"sourceRoot":""}