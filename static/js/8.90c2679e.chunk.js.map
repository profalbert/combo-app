{"version":3,"sources":["validators/validators.ts","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx"],"names":["validateString","title","limit","checkArray","split","isTheWordLonger","i","length","replace","trim","chatValidatorForm","room","firstName","lastName","firstSpace","includes","lastSpace","CssTextField","withStyles","root","color","teal","borderBottomColor","transition","borderColor","TextField","useStyles","makeStyles","theme","textField","width","height","mapDispatchToProps","setDataModalWindow","mainActions","TodoForm","connect","state","propsIsEditTodo","mainApp","onAdd","classes","useState","setTitle","className","onKeyPress","e","key","JSON","parse","localStorage","getItem","titleEnd","onChange","target","value","disabled","label","id","variant","GreenCheckbox","green","checked","props","Checkbox","buttonEdit","backgroundColor","fontSize","marginRight","buttonDelete","padding","buttonSave","orange","buttonCancel","toggleFollowingProgress","setPropsIsEditTodo","TodoList","followingInProgress","todos","onRemove","onToggle","onAddEdit","classesStyles","isEditTodo","setIsEditTodo","stringify","valueTodos","setValueTodos","useEffect","map","todo","completed","push","join","htmlFor","some","multiline","inputValueCache","prev","changeHaldlerTodo","rowsMax","autoFocus","filter","todoChange","item","Button","onClick","addNewPostEdit","IconButton","onDoubleClick","preventDefault","removeHandler","aria-label","style","red","TodosPage","setTodos","isCatalog","setIsCatalog","saved","setItem","type","CSSTransition","in","timeout","classNames","mountOnEnter","unmountOnExit","newTodo","Date","now"],"mappings":"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","file":"static/js/8.90c2679e.chunk.js","sourcesContent":["export type FieldValidatorType = (...args: any[]) => string | boolean | undefined\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value: string) => {\r\n  if (value && value.length > maxLength) {\r\n    return `Max length is ${maxLength} symbols`;\r\n  } else {\r\n    return undefined;    \r\n  }\r\n}\r\n\r\n\r\nexport const validateString: FieldValidatorType = (title: string, limit: number) => {\r\n  let checkArray: string[] = title.split(' ')\r\n  let isTheWordLonger: boolean = false\r\n\r\n  for(let i: number = 0; i < checkArray.length; i++) {  \r\n    if (checkArray[i].length < 18) {\r\n      isTheWordLonger = true\r\n    }\r\n  }\r\n  if ((isTheWordLonger) && (title.replace(/\\s+/g, ' ').trim() !== '') && (title.length < limit)) {\r\n    return title.replace(/\\s+/g, ' ').trim()\r\n  } else {\r\n    return undefined\r\n  }  \r\n}\r\n\r\n\r\nexport const chatValidatorForm: FieldValidatorType = (room: string, firstName: string, lastName: string) => {\r\n  let firstSpace = firstName.split('').includes(' ')\r\n  let lastSpace = lastName.split('').includes(' ')\r\n  if (firstSpace || lastSpace || !room || !firstName || !lastName || (firstName.length > 15) || (lastName.length > 15)) {\r\n    return false\r\n  } else {\r\n    return true;    \r\n  }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {useState} from 'react';\r\n// import {useRef} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {validateString} from '../validators/validators';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport {teal} from '@material-ui/core/colors';\r\nimport {mainActions} from '../redux/main-reducer';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: teal[400],\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: 'green',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        transition: 'all 0.3s',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: 'black',\r\n        transition: 'all 0.3s',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: teal[400],\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  textField: {\r\n    width: '100%',\r\n    '& input': {\r\n      height: 'auto',\r\n      width: '100%',\r\n    },\r\n  },  \r\n}));\r\n\r\n\r\ntype MapStatePropsType = {\r\n  propsIsEditTodo: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n  setDataModalWindow: (isOpen: boolean, title?: string | null | undefined) => void\r\n}\r\ntype OwnPropsType = {\r\n  onAdd(title: string): void\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nconst TodoFormContainer: React.FC<PropsType> = ({onAdd, propsIsEditTodo, setDataModalWindow}) => {\r\n  const classes = useStyles();\r\n\r\n  const [title, setTitle] = useState<string>('')\r\n  // const ref = useRef<HTMLInputElement>(null)\r\n  \r\n  const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.target.value)\r\n  }\r\n\r\n  const keyPressHandler = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      let limitInLocalstorage = JSON.parse(localStorage.getItem('todos') || '[]')\r\n\r\n      if (limitInLocalstorage.length < 50) {\r\n        const titleEnd: string | boolean | undefined = validateString(title, 200)\r\n        if(titleEnd && typeof titleEnd === 'string') {\r\n          onAdd(titleEnd)\r\n        } else {\r\n          setDataModalWindow(true, \"You filled the field incorrectly!\");\r\n        }      \r\n      } else {\r\n        setDataModalWindow(true, \"Sorry, but the limit for adding tasks is over!\");\r\n      }      \r\n      \r\n      // ref.current!.value = ''\r\n      setTitle('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"editInputField\">\r\n      <div className=\"input-field\">        \r\n        <CssTextField \r\n          onKeyPress={keyPressHandler} // для кнопки (в данном случае Enter)\r\n          onChange={changeHandler} \r\n          disabled={!propsIsEditTodo}\r\n          value={title} \r\n          className={classes.textField}\r\n          // ref={ref}\r\n          label=\"Enter case name\"\r\n          id=\"outlined-basic\" variant=\"outlined\"\r\n        />\r\n      </div>\r\n    </div>    \r\n  );\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    propsIsEditTodo: state.mainApp.propsIsEditTodo\r\n  }\r\n}\r\nlet mapDispatchToProps: MapDispatchPropsType = {\r\n  setDataModalWindow: mainActions.setDataModalWindow\r\n}\r\n\r\n\r\nconst TodoForm = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)(TodoFormContainer)\r\n\r\nexport default TodoForm;","import React, {useState, useEffect, ChangeEvent} from 'react';\r\nimport {mainActions} from '../redux/main-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {validateString} from '../validators/validators';\r\nimport { green, teal, red, orange } from '@material-ui/core/colors';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\nimport { makeStyles, withStyles, Theme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { AppStateType } from '../redux/redux-store';\r\nimport { TodoType } from '../types/types';\r\n\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: teal[400],\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: 'green',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        transition: 'all 0.3s',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: 'black',\r\n        transition: 'all 0.3s',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: teal[400],\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    width: 'min-content',\r\n    '&$checked': {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  buttonEdit: {\r\n    backgroundColor: teal[400],\r\n    color: '#fff', \r\n    '&:hover': {\r\n      backgroundColor: teal[600],\r\n    },  \r\n    fontSize:' 12px',\r\n    marginRight: '15px',\r\n  },\r\n  buttonDelete: {\r\n    padding: '3px',\r\n  },\r\n  buttonSave: {\r\n    backgroundColor: orange[700],\r\n    color: '#fff', \r\n    '&:hover': {\r\n      backgroundColor: orange[500],\r\n    },  \r\n    fontSize:' 12px',\r\n    marginRight: '15px',\r\n  },\r\n  buttonCancel: {\r\n    backgroundColor: teal[400],\r\n    color: '#fff', \r\n    '&:hover': {\r\n      backgroundColor: teal[600],\r\n    },  \r\n    fontSize:' 12px',\r\n  },\r\n}));\r\n\r\n\r\ntype MapStatePropsType = {\r\n  followingInProgress: Array<number>\r\n}\r\ntype MapDispatchPropsType = {\r\n  toggleFollowingProgress: (isFollowingProgress: boolean, id: number) => void\r\n  setPropsIsEditTodo: (isEditTodo: boolean) => void\r\n  setDataModalWindow: (isOpen: boolean, title?: string | null | undefined) => void\r\n}\r\ntype OwnPropsType = {\r\n  onAddEdit: (id: number, title: string) => void \r\n  todos: TodoType[]\r\n  onToggle: (id: number) => void\r\n  onRemove: (id: number) => void\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\n\r\nconst TodoListContainer: React.FC<PropsType> = ({todos, onRemove, onToggle, followingInProgress, toggleFollowingProgress, onAddEdit, setPropsIsEditTodo, setDataModalWindow}) => {\r\n  const classesStyles = useStyles();\r\n\r\n  const [isEditTodo, setIsEditTodo] = useState<boolean>(false)\r\n  const [valueTodos, setValueTodos] = useState<Array<TodoType>>( JSON.parse(JSON.stringify(todos)) )\r\n\r\n\r\n  useEffect(() => {\r\n    setValueTodos(JSON.parse(JSON.stringify(todos)))\r\n  }, [todos])\r\n\r\n\r\n  const removeHandler = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, id: number) => {\r\n    e.preventDefault()\r\n    onRemove(id)\r\n  }\r\n\r\n\r\n  const editTodo = (id: number) => {\r\n    setIsEditTodo(!isEditTodo)\r\n    toggleFollowingProgress(true, id)\r\n    setPropsIsEditTodo(false)\r\n  }\r\n\r\n\r\n  const addNewPostEdit = (id: number) => {\r\n    setIsEditTodo(!isEditTodo)\r\n    const title = valueTodos.filter(todoChange => id === todoChange.id).map(item => item.title)[0]\r\n    const titleEnd: string | boolean | undefined = validateString(title, 500)\r\n\r\n    if (titleEnd) {\r\n      onAddEdit(id, title)\r\n    } else {\r\n      setValueTodos(JSON.parse(JSON.stringify(todos)))\r\n      setDataModalWindow(true, \"You filled the field incorrectly!\");\r\n    }\r\n\r\n    toggleFollowingProgress(false, id)\r\n    setPropsIsEditTodo(true)\r\n  }\r\n\r\n  \r\n  const cancelNewPostEdit = (id: number) => {\r\n    setIsEditTodo(!isEditTodo)\r\n    toggleFollowingProgress(false, id)\r\n    setPropsIsEditTodo(true)\r\n    setValueTodos(JSON.parse(JSON.stringify(todos)))\r\n  }\r\n\r\n\r\n  const changeHaldlerTodo = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, id: number) => {\r\n    let inputValueCache = e.target.value\r\n    setValueTodos(prev =>  \r\n      prev.map(todo => {        \r\n        if (todo.id === id) {\r\n          todo.title = inputValueCache\r\n        }        \r\n        return todo\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n  if (todos.length === 0) {\r\n    return <p className=\"center\">While there is no things</p>\r\n  }\r\n\r\n  return (\r\n    <div className=\"pb2\">\r\n      <ul>\r\n        {todos.map(todo => {\r\n          const classes = ['todo']\r\n          if (todo.completed) {\r\n            classes.push('completed')\r\n          }\r\n          \r\n          return (\r\n            <li className={classes.join(\" \")} key={todo.id}>\r\n              <label className={\"labelTodo\"} htmlFor={`${todo.id}`}>\r\n\r\n                  {(followingInProgress.some(id => id === todo.id) && isEditTodo)\r\n                  ? <>\r\n                      <CssTextField\r\n                        id=\"outlined-multiline-static\"\r\n                        label=\"Multiline\"\r\n                        multiline\r\n                        onChange={(e) => changeHaldlerTodo(e, todo.id)}\r\n                        rowsMax={3}\r\n                        autoFocus={true}\r\n                        value={valueTodos.filter(todoChange => todo.id === todoChange.id).map(item => item.title)[0]}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </>\r\n                  : <div className={\"inputWrap\"}>                   \r\n                      <GreenCheckbox disabled={isEditTodo} id={`${todo.id}`} checked={todo.completed} onChange={() => onToggle(todo.id)}/>\r\n                      <span className={'inputWrapInput'}>{todo.title}</span>\r\n                    </div> \r\n                  } \r\n\r\n              </label>              \r\n              <div className={`btnWrap`}>\r\n\r\n                {(followingInProgress.some(id => id === todo.id) && isEditTodo)\r\n                ? <>\r\n                    <Button color=\"inherit\" disabled={!isEditTodo} onClick={() => addNewPostEdit(todo.id)} className={`${classesStyles.buttonSave}`} variant=\"contained\">\r\n                      save\r\n                    </Button>\r\n                    <Button color=\"inherit\" disabled={!isEditTodo} onClick={() => cancelNewPostEdit(todo.id)} className={`${classesStyles.buttonCancel}`} variant=\"contained\">\r\n                      cancel\r\n                    </Button>\r\n                  </>\r\n                : <>\r\n                    <Button color=\"inherit\" disabled={isEditTodo} onClick={() => editTodo(todo.id)} className={`${classesStyles.buttonEdit}`} variant=\"contained\">\r\n                      edit\r\n                    </Button>\r\n                    <IconButton disabled={isEditTodo} onDoubleClick={(e) => removeHandler(e, todo.id)} className={`${classesStyles.buttonDelete}`} aria-label=\"delete\">\r\n                      <DeleteIcon style={{ color: isEditTodo ? '#00000042' : red['A700'] }}/>\r\n                    </IconButton>                   \r\n                  </>\r\n                }  \r\n\r\n              </div> \r\n                  \r\n            </li>\r\n          )\r\n        })}        \r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    followingInProgress: state.mainApp.followingInProgress\r\n  }\r\n}\r\nlet mapDispatchToProps: MapDispatchPropsType = {\r\n  toggleFollowingProgress: mainActions.toggleFollowingProgress,\r\n  setPropsIsEditTodo: mainActions.setPropsIsEditTodo,\r\n  setDataModalWindow: mainActions.setDataModalWindow,\r\n}\r\n\r\n\r\nconst TodoList = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)(TodoListContainer)\r\n\r\nexport default TodoList;","import React, {useState, useEffect} from 'react';\r\nimport TodoForm from '../components/TodoForm';\r\nimport TodoList from '../components/TodoList';\r\nimport {TodoType} from '../types/types';\r\nimport {CSSTransition} from 'react-transition-group';\r\nimport {connect} from 'react-redux';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\n\r\n// declare var confirm: (question: string) => boolean // объявляем глобальную переменную\r\n\r\n\r\ntype MapStatePropsType = {}\r\ntype MapDispatchPropsType = {}\r\ntype OwnPropsType = {}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nconst TodosPageContainer: React.FC<PropsType> = (props) => {\r\n  const [todos, setTodos] = useState<TodoType[]>([])\r\n  const [isCatalog, setIsCatalog] = useState<boolean>(true)\r\n\r\n  \r\n  useEffect(() => { // забираем элементы из localStorage\r\n    let saved = JSON.parse(localStorage.getItem('todos') || '[]') as TodoType[]\r\n    setTodos(saved)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('todos', JSON.stringify(todos))\r\n  }, [todos])\r\n  \r\n\r\n  const addHandler = (title: string) => {\r\n    const newTodo: TodoType = {\r\n      title: title,\r\n      id: Date.now(),\r\n      completed: false\r\n    }\r\n    // setTodos([newTodo, ...todos]) // эта запись не гарантирует того, что мы будем работать с предыдущим стейтом\r\n    setTodos(prev => [newTodo, ...prev]) // а эта гарантирует\r\n  }\r\n\r\n  const addHandlerEdit = (id: number, title: string) => {\r\n    setTodos(prev =>  \r\n      prev.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.title = title\r\n        }\r\n        return todo\r\n      })\r\n    )\r\n  }\r\n\r\n  const toggleHandler = (id: number) => {\r\n    setTodos(prev =>  \r\n      prev.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed\r\n        }\r\n        return todo\r\n      })\r\n    )\r\n  }\r\n\r\n  const removeHandler = (id: number) => {\r\n    setTodos(prev => prev.filter(todo => todo.id !== id))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ul className={\"ulWrap\"}>\r\n        <li className={`ulWrapLi1 ${isCatalog ? \"ulWrapLi1Down\" : \"ulWrapLi1Up\"}`}>\r\n          <input type={\"checkbox\"} id={\"ulWrapLi1\"}></input>\r\n          <label onClick={() => setIsCatalog(!isCatalog)} htmlFor=\"ulWrapLi1\">Catalog</label>\r\n        </li>\r\n        <li className={\"ulWrapLi2\"}>\r\n          <CSSTransition \r\n            in={isCatalog}\r\n            timeout={750}\r\n            classNames={\"CSSTransAlert\"}\r\n            mountOnEnter\r\n            unmountOnExit\r\n          >\r\n            <div className={\"CSSTransAlertBlock\"}>\r\n              <TodoForm onAdd={addHandler} />\r\n              <TodoList onAddEdit={addHandlerEdit} todos={todos} onToggle={toggleHandler} onRemove={removeHandler}/>\r\n            </div>            \r\n          </CSSTransition>\r\n        </li>\r\n      </ul>  \r\n    </>\r\n  );\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {}\r\n}\r\nlet mapDispatchToProps: MapDispatchPropsType = {}\r\n\r\n\r\nconst TodosPage = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)(TodosPageContainer)\r\n\r\nexport default TodosPage;\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}